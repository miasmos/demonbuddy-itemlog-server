
exports.twitchCommands = twitchCommands;

function twitchCommands(client,channel) {
    this.client = client;
    this.channel = channel;
}

twitchCommands.prototype.mods = function() {
    this.client.say(this.channel, '/mods');
};

twitchCommands.prototype.color = function(color) {
    this.client.say(this.channel, '/color '+color);
};

twitchCommands.prototype.ignore = function(user) {
    this.client.say(this.channel, '/ignore '+user);
};

twitchCommands.prototype.unignore = function(user) {
    this.client.say(this.channel, '/unignore '+user);
};

twitchCommands.prototype.me = function(msg) {
    this.client.say(this.channel, '/me '+msg);
};

twitchCommands.prototype.disconnect = function() {
    this.client.say(this.channel, '/disconnect');
};

twitchCommands.prototype.timeout = function(user,time) {
    if (typeof time != 'undefined') {
        time = ' '+time;
        this.client.say(this.channel, '/timeout '+user+time);
    } else {
        this.client.say(this.channel, '/timeout '+user);
    }
};

twitchCommands.prototype.ban = function(user) {
    this.client.say(this.channel, '/ban '+user);
};

twitchCommands.prototype.unban = function(user) {
    this.client.say(this.channel, '/unban '+user);
};

twitchCommands.prototype.slow = function(time) {
    if (time == 0) {this.client.say(this.channel, '/slowoff');}
    else {
        if (typeof time === 'undefined') {
            this.client.say(this.channel, '/slow');
        } else {
            this.client.say(this.channel, '/slow '+time);
        }
    }
};

twitchCommands.prototype.slowoff = function() {
    this.client.say(this.channel, '/slowoff'); 
};

twitchCommands.prototype.subscribers = function(s) {
    if (typeof s == 'undefined') {
        this.client.say(this.channel, '/subscribers');  
    } else {
        if (s == 1) {
            this.client.say(this.channel, '/subscribers'); 
        } else {
            this.client.say(this.channel, '/subscribersoff'); 
        }
    }
};

twitchCommands.prototype.subscribersoff = function(time) {
    this.client.say(this.channel, '/subscribersoff');  
};

twitchCommands.prototype.clear = function() {
    this.client.say(this.channel, '/clear');  
};

twitchCommands.prototype.r9kbeta = function(s) {
    if (typeof s == 'undefined') {
        this.client.say(this.channel, '/r9kbeta');  
    } else {
        if (s == 1) {
            this.client.say(this.channel, '/r9kbeta'); 
        } else {
            this.client.say(this.channel, '/r9kbetaoff'); 
        }
    }
};


twitchCommands.prototype.r9kbetaoff = function() {
    this.client.say(this.channel, '/r9kbetaoff');  
};

twitchCommands.prototype.commercial = function(time) {
    if (typeof time == 'undefined') {
        this.client.say(this.channel, '/commercial');  
    } else {
        this.client.say(this.channel, '/commercial '+time); 
    }
};

twitchCommands.prototype.host = function(channel) {
    this.client.say(this.channel, '/host '+channel);  
};

twitchCommands.prototype.unhost = function() {
    this.client.say(this.channel, '/unhost');  
};

twitchCommands.prototype.mod = function(user) {
    this.client.say(this.channel, '/mod '+user);  
};

twitchCommands.prototype.unmod = function(user) {
    this.client.say(this.channel, '/unmod '+user);  
};

twitchCommands.prototype.say = function(user) {
    this.client.say(this.channel, user);  
};