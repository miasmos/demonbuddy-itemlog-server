var fs = require('fs');
var moment = require('moment');
var events = require('events');

var itemids = []; //ensure duplicates aren't logged
var qualityFilter = 3; //3 = legendary, 2 = rare+, 1 = uncommon+, 0 = common+

function D3ItemStream(opts) {
  if (!opts) opts = {}
  this.opts = opts;

  if (typeof this.opts.path === 'undefined') throw new Error('A path has not been supplied!');
  if (typeof this.opts.path === 'undefined') throw new Error('A filename has not been supplied!')

  this.events = new events.EventEmitter();
  this._reset();
  this._main();
}

D3ItemStream.prototype._main = function() {
  var self = this;

  this.mainInterval = setInterval(function() {
    if (!self.appTimeout) {
      if (self.lastLine == -1 && self.file == null && !self.appTimeout) {
        self._getFileByName(self.opts.path, self.opts.filename, function(file) {
          if (file) {
            if (!self.appTimeout) {
              if (self.opts.debug) {console.log('Found file');}
              self.file = file;
              self._readLines(self.file.file, function(line, data, end) {
                if (end) {
                  self.lastLine = line;
                  self.init = false;
                }
              });
            }
          }
        });
      } else if (self.lastLine != -1 && self.file != null && !self.appTimeout) {
        self._readLines(self.file.file, function(line, data, end) {
          if (line > self.lastLine && !self.init) {
            self._processLine(data);
            if (end && self.file != null) self.lastLine = line;
          }
        });
      }
    }
  }, 1000);
}

D3ItemStream.prototype._reset = function(timeout) {
  if (timeout == true) {
    this.appTimeout = true;
    var self = this;
    setTimeout(function(){self.appTimeout = false;}, 2000);
  }
  this.lastLine = -1;
  this.file = null;
  this.appTimeout = false;
  this.init = true;
}

D3ItemStream.prototype._processLine = function(data) {
  if (data.length > 0) {
    var output = this._normalizeData(data);

    if (parseInt(output.qualitycheck) < qualityFilter) {
      console.log(output.name + "("+output.key+") is of "+this._getQuality(output.qualitycheck)+" quality, at least "+this._getQuality(qualityFilter)+" is required")
      return;
    }

    if (itemids.indexOf(output.key) > -1) {
        console.log(output.name + "("+output.key+") is already in list, skipping");
      return;
    } else {
        console.log("Added "+output.name+"("+output.key+") to id list");
        itemids.push(output.key);
    }

    this.events.emit('item',output);
  }
}

D3ItemStream.prototype._normalizeData = function(data) {
  var ret = {};
  var temp = data.split('|');

  for (var t in temp) {
    var key = temp[t].split(':')[0];
    key = key.substring(1, key.length-1).toLowerCase();
    var value = temp[t].split(':')[1];
    if (value == "False") value = false;
    if (value == "True") value = true;
    if (value == undefined) continue;
    ret[key] = value;
  }
  return ret;
}

D3ItemStream.prototype._contains = function(needle, stack) {
  if (!stack) {return '';}
  return stack.indexOf(needle) > -1;
}

D3ItemStream.prototype._getFilename = function(file) {
  return file.replace(/^.*[\\\/]/, '');
}

D3ItemStream.prototype._getNewestFile = function(dir, callback) {
  if (!callback) return;

  fs.readdir(dir, function(err, files) {
    if (err) {console.log(err); callback();}
    if (!files || (files && files.length === 0)) {
        callback();
    }
    if (files.length === 1) {
        callback(files[0]);
    }
    var newest = { file: files[0] };
    var checked = 0;
    fs.stat(dir + newest.file, function(err, stats) {
        newest.mtime = stats.mtime;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            (function(file) {
                fs.stat(file, function(err, stats) {
                    ++checked;
                    if (stats.mtime.getTime() > newest.mtime.getTime()) {
                        newest = { file : file, mtime : stats.mtime, ctime : stats.ctime };
                    }
                    if (checked == files.length) {
                        callback(newest);
                    }
                });
            })(dir + file);
        }
    });
  });
}

D3ItemStream.prototype._getFileByName = function(dir, name, callback) {
  if (!callback) return;
  var self = this;

  fs.readdir(dir, function(err, files) {
    if (err) {console.log(err); callback();}
    if (!files || (files && files.length === 0)) {
        callback();
        return;
    }
    
    var newest = { file: files[0] };
    var checked = 0;
    fs.stat(dir + newest.file, function(err, stats) {
        newest.mtime = stats.mtime;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            (function(file) {
                fs.stat(file, function(err, stats) {
                    ++checked;
                    if (!stats.isDirectory() && name == self._getFilename(file)) {
                        callback({ file : file, mtime : stats.mtime, ctime : stats.ctime });
                        return;
                    }
                    if (checked == files.length) {
                        callback();
                        return;
                    }
                });
            })(dir + file);
        }
    });
  });
}

D3ItemStream.prototype._readLines = function(file, func) {
  var input = fs.createReadStream(file);
  var remaining = '';
  var lineNum = 0;

  input.on('data', function(data) {
    remaining += data;
    var index = remaining.indexOf('\n');
    var last  = 0;
    while (index > -1) {
      var line = remaining.substring(last, index);
      last = index + 1;
      func(++lineNum, line, 0);
      index = remaining.indexOf('\n', last);
    }

    remaining = remaining.substring(last);
  });

  input.on('end', function() {
    if (remaining.length > 0) {
      func(++lineNum, remaining, 1);
    } else {
      func(lineNum, '', 1);
    }
  });
}

D3ItemStream.prototype._isRecentFile = function(timestamp) {
  return this._timestampDiff(timestamp, 'minutes', 120);
}

D3ItemStream.prototype._isRecentlyModifiedFile = function(timestamp) {
  return this._timestampDiff(timestamp, 'seconds', 2);
}

D3ItemStream.prototype._timestampDiff = function(timestamp, interval, target) {
  var a = moment(timestamp);
  var b = moment(new Date());
  return b.diff(a, interval) < target;
}

D3ItemStream.prototype._getQuality = function(num) {
  num = parseInt(num);
  switch(num) {
    case 0:
      return "Normal";
    case 1:
      return "Uncommon";
    case 2:
      return "Rare";
    case 3:
      return "Legendary";
    default:
      return "Unknown";
  }
}
module.exports = D3ItemStream;