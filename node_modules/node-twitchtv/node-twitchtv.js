var request = require("request"),
    _ = require("underscore")
     logger = require("winston");

var twitch_url = "https://api.twitch.tv/kraken";

TwitchClient = function(config) {
  try {
    this.client_id = config.client_id;
    //this.username = config.username;
    //this.password = config.password;
    this.scope = config.scope;
    this.config = config;

  } catch (err) {
    logger.warn("Please remember to set your client_id!");
  }

  return this;
};

TwitchClient.prototype.auth = function authenticate(config, callback) {
  var params = _.extend({}, {
    grant_type: 'authorization_code'
  }, config);

  request.post({
    url: twitch_url + "/oauth2/token",
    form: params
  }, function(err, response, body) {
    var res = JSON.parse(body);
    if (typeof res.access_token == 'undefined') {
      return false;
    } else {
      this.oath_token = res.access_token;
    }
  });
};

TwitchClient.prototype.games = function retrieveGames(params, callback) {
  if (!callback || typeof callback != 'function') return false;

  var self = this;

  request.get({
    url: twitch_url + "/games/top",
    qs: params
  }, function(err, response, body) {
    body = JSON.parse(body);
    var games = body.top;
    if (callback) callback.call(self, null, games, body);
  });
};

TwitchClient.prototype.channels = function retrieveChannels(params, callback) {
  if (!callback || typeof callback != 'function') return false;
  if (typeof params.channel == 'undefined' || !params.channel) return false;

  var self = this;

  request.get({
    url: twitch_url + "/channels/" + params.channel
  }, function(err, response, body) {
    body = JSON.parse(body);
    if (callback) callback.call(self, null, body);
  });
};

TwitchClient.prototype.setChannel = function retrieveChannels(params, callback) {
  if (typeof params.channel == 'undefined' && typeof this.config.channel == 'undefined') return false;
  var self = this;

  var url = twitch_url + "/channels/"+this.config.channel+"?";
  var and = '';
  if (typeof params.status != 'undefined') {params.status = params.status.replace(/ /g, '+'); url += and+"channel[status]="+encodeURI(params.status); and = "&";}
  if (typeof params.game != 'undefined') {params.game = params.game.replace(/ /g, '+'); url += and+"channel[game]="+params.game; and = "&";}
  if (typeof params.delay != 'undefined') {url += and+"channel[delay]="+params.delay; and = "&";}
  url += "&oauth_token="+this.config.oauth_token+"&_method=put&scope="+this.config.scope;

  request.get({
    url: url
  }, function(err, response, body) {
    body = JSON.parse(body);
    if (callback && typeof callback == 'function') {callback.call(self, null, body);}
  });
};

TwitchClient.prototype.streams = function retrieveChannels(params, callback) {
  if (!callback || typeof callback != 'function') return false;
  if (typeof params.channel == 'undefined' || !params.channel) return false;

  var self = this;

  request.get({
    url: twitch_url + "/streams/" + params.channel
  }, function(err, response, body) {
    body = JSON.parse(body);
    if (callback) callback.call(self, null, body);
  });
};

TwitchClient.prototype.videos = function retrieveChannels(params, callback) {
  if (!callback || typeof callback != 'function') return false;
  if (typeof params.channel == 'undefined' || !params.channel) return false;

  var self = this;

  request.get({
    url: twitch_url + "/channels/" + params.channel + "/videos"
  }, function(err, response, body) {
    body = JSON.parse(body);
    if (callback) callback.call(self, null, body);
  });
};

TwitchClient.prototype.users = function retrieveUserInformation(params, callback) {
  if (!callback || typeof callback != 'function') return false;
  if (typeof params.user == 'undefined' || !params.user) return false;

  var self = this;

  request.get({
    url: twitch_url + "/users/" + params.user
  }, function(err, response, body) {
    body = JSON.parse(body);
    if (callback) callback.call(self, null, body);
  });
};

TwitchClient.prototype.streamIsLive = function(user,callback) {
  this.streams({ channel: user }, function(err, response) {
    if (err || !response) {
      callback(1,false);
      return;
    }

    callback(undefined,!response.stream ? false : true);
    return;
  });
}

module.exports = TwitchClient;
